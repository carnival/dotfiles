[BASIC]
# Regular expression which should only match correct module names
module-rgx=([a-z][a-z0-9_]*)$

attr-rgx=[a-z_][a-z0-9_]{,30}

# Regular expression which should only match correct class names
class-rgx=[A-Z_]+[a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_]+[a-z0-9_][a-z0-9]*$

# Regular expression which should only match correct method names
# Allow upper cases in testFeatureSelection where FeatureSelection
# is a class name
method-rgx=(([a-z_]|__)[a-z0-9_]*(__)?|test[a-zA-Z0-9_]*)$

# Regular expression which should only match correct argument names
argument-rgx=[a-z][a-z0-9]*_*[a-z0-9]*_*[a-z0-9]*_?$

# Regular expression which should only match correct variable names
variable-rgx=([a-z_]+[a-z0-9]*_*[a-z0-9]*_*[a-z0-9]*_?||(__[a-zA-Z0-9_]*__))$||[A-Z]+

# Regular expression which should only match correct module level names
# Default: (([A-Z_][A-Z1-9_]*)|(__.*__))$
const-rgx=([a-z_]+[a-z0-9]*_*[a-z0-9]*_*[a-z0-9]*_?|__[a-zA-Z0-9_]*__)$||[A-Z]+


[FORMAT]
indent-string='    '


[DESIGN]

# We are capable to follow that many, yes!
max-branchs = 20

# some base class constructors have quite a few arguments
max-args = 14

# and due to ClassWithCollections and conditional attributes classes by default have lots
# of attributes
max-attributes = 14

# some sci computation can't be handled efficiently without having
#lots of locals
max-locals = 35

[MESSAGES CONTROL]
# http://pylint-messages.wikidot.com/all-codes
#
# Disable the following PyLint messages:
# C0111: Missing %s docstring
# E1101 - Has no member (countless false-positives)
# R0903 - Too few public methods (%s/%s)
# W0105 - String statement has no effect # often used for after-line doc
# W0142 - Used * or ** magic
# W0212 - Access to a protected member ... of a client class
# W0232 - Class has no __init__ method
# W0613 - Unused argument
# F0401: Unable to import %s
# C0301: Line too long (%s/%s)
# C0302: Too many lines in module (%s)
# E1002: Use of super on an old style class
# W0703: Catching too general exception %s
#disable= C0111, E1101, R0903, W0105, W0142, W0613, F0401,C0301,C0302,E1002,W0703,W0232

# Disable all warnings for now. Errors are really useful.
disable= C0111, E1101, R0903, F0401,C0301,C0302,E1002, W0101 ,W0102 ,W0104 ,W0105 ,W0106 ,W0107 ,W0108 ,W0109 ,W0110 ,W0120 ,W0121 ,W0122 ,W0141 ,W0142 ,W0150 ,W0199 ,W0201 ,W0211 ,W0212 ,W0221 ,W0222 ,W0223 ,W0231 ,W0232 ,W0233 ,W0234 ,W0301 ,W0311 ,W0312 ,W0331 ,W0332 ,W0333 ,W0401 ,W0402 ,W0403 ,W0404 ,W0406 ,W0410 ,W0511 ,W0512 ,W0601 ,W0602 ,W0603 ,W0604 ,W0611 ,W0612 ,W0613 ,W0614 ,W0621 ,W0622 ,W0623 ,W0631 ,W0632 ,W0633 ,W0701 ,W0702 ,W0703 ,W0704 ,W0710 ,W0711 ,W0712 ,W1001 ,W1111 ,W1201, W1202,W1300 ,W1301 ,W1401 ,W1402 ,W1501, C1001, no-self-use

#W0101: Unreachable code
#W0102: Dangerous default value %s as argument
#W0104: Statement seems to have no effect
#W0105: String statement has no effect
#W0106: Expression "%s" is assigned to nothing
#W0107: Unnecessary pass statement
#W0108: Lambda may not be necessary
#W0109: Duplicate key %r in dictionary
#W0110: map/filter on lambda could be replaced by comprehension
#W0120: Else clause on loop without a break statement
#W0121: Use raise ErrorClass(args) instead of raise ErrorClass, args.
#W0122: Use of exec
#W0141: Used builtin function %r
#W0142: Used * or ** magic
#W0150: %s statement in finally block may swallow exception
#W0199: Assert called on a 2-uple. Did you mean \'assert x,y\'?
#W0201: Attribute %r defined outside __init__
#
#W0211: Static method with %r as first argument
#W0212: Access to a protected member %s of a client class
#W0221: Arguments number differs from %s method
#W0222: Signature differs from %s method
#W0223: Method %r is abstract in class %r but is not overridden
#W0231: __init__ method from base class %r is not called
##W0232: Class has no __init__ method
#W0233: __init__ method from a non direct base class %r is called
#W0234: iter returns non-iterator
#W0301: Unnecessary semicolon
#W0311: Bad indentation. Found %s %s, expected %s
#W0312: Found indentation with %ss instead of %ss
#W0331: Use of the <> operator
#W0332: Use of "l" as long integer identifier
#W0333: Use of the `` operator
#W0401: Wildcard import %s
#W0402: Uses of a deprecated module %r
#W0403: Relative import %r, should be %r
#W0404: Reimport %r (imported line %s)
#W0406: Module import itself
#W0410: __future__ import is not the first non docstring statement
#W0511: (warning notes in code comments; message varies)
#W0512: Cannot decode using encoding "%s", unexpected byte at position %d
#W0601: Global variable %r undefined at the module level
#W0602: Using global for %r but no assigment is done
#W0603: Using the global statement
#W0604: Using the global statement at the module level
#W0611: Unused import %s
#W0612: Unused variable %r
#W0613: Unused argument %r
#W0614: Unused import %s from wildcard import
#W0621: Redefining name %r from outer scope (line %s)
#W0622: Redefining built-in %r
#W0623: Redefining name %r from %s in exception handler
#W0631: Using possibly undefined loop variable %r
#W0632: Possible unbalanced tuple unpacking with sequence%s: â€¦
#W0633: Attempting to unpack a non-sequence%s
#W0701: Raising a string exception
#W0702: No exception type(s) specified
#W0703: Catching too general exception %s
#W0704: Except doesn't do anything
#W0710: Exception doesn't inherit from standard "Exception" class
#W0711: Exception to catch is the result of a binary "%s" operation
#W0712: Implicit unpacking of exceptions is not supported in Python 3
#W1001: Use of "property" on an old style class
#W1111: Assigning to function call which only returns None
#W1201: Specify string format arguments as logging function parameters
#W1300: Format string dictionary key should be a string, not %s
#W1301: Unused key %r in format string dictionary
#W1401: Anomalous backslash in string: \'%s\'. String constant might be missing an r prefix.
#W1402: Anomalous Unicode escape in byte string: \'%s\'. String constant might be missing an r or u prefix.
#W1501: "%s" is not a valid mode for open.

[REPORTS]

# set the output format. Available formats are text, parseable, colorized and
# html
output-format=colorized

# Include message's id in output
include-ids=yes

# Tells wether to display a full report or only the messages
reports=no

[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
# FIXME -- something which needs fixing
# TODO  -- future plan
# XXX   -- some concern
# YYY   -- comment/answer to above mentioned concern
#notes=FIXME,TODO,XXX,YYY
notes=XXX,YYY
